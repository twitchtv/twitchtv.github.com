<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Getting Technical]]></title>
  <link href="http://twitchtv.github.com/atom.xml" rel="self"/>
  <link href="http://twitchtv.github.com/"/>
  <updated>2012-07-05T17:08:16-07:00</updated>
  <id>http://twitchtv.github.com/</id>
  <author>
    <name><![CDATA[TwitchTV]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RSpec Tech Talk]]></title>
    <link href="http://twitchtv.github.com/blog/2012/07/04/rspec-tech-talk/"/>
    <updated>2012-07-04T20:14:00-07:00</updated>
    <id>http://twitchtv.github.com/blog/2012/07/04/rspec-tech-talk</id>
    <content type="html"><![CDATA[<p>Midway through &#8216;10 we found our product market fit and with the increased usage, <a href="http://twitchtv.github.com/blog/2012/05/30/a-transitional-year/">new focus</a>,
and a real desire to building something massive we started a huge internal effort to increase code quality. Testing is a cornerstone
of everything that we write now. RSpec has changed the format in which tests are to be expressed and recently we got together to
share that information with all devs with the aim being that all new tests you write should be in the new format and convert the tests
written in the old format when you come across them.</p>

<!-- more -->


<p><em>Everything is lazy now</em></p>

<p>The most significant change is that test evaluation is lazy now. This is implemented with a new DSL. The proposed benefits of this
change are that the minimum set of infrastructure is spun up for each test case. We haven&#8217;t noticed an increase or slowdown in the
runtime performance of tests written in this new format - this is likely that our tests are bound by db IO (we&#8217;ve recently migrated
all of our tests to use <a href="https://github.com/thoughtbot/factory_girl/">FactoryGirl</a> and as a result we can use a non centralized
test db). However we prefer the expressiveness of this format and when dealing with tests it really helps to write more with fewer
lines.</p>

<figure class='code'><figcaption><span>Old style basic test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">BasicController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">render_views</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#show&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;error cases&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">context</span> <span class="s2">&quot;when no login parameter is provided&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="ss">:show</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;404&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="no">Yajl</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">({</span><span class="ss">:error</span> <span class="o">=&gt;</span> <span class="ss">:missing_login</span><span class="p">})</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">context</span> <span class="s2">&quot;when an invalid login parameter is provided&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:login</span> <span class="o">=&gt;</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;404&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="no">Yajl</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">({</span><span class="ss">:error</span> <span class="o">=&gt;</span> <span class="ss">:invalid_login</span><span class="p">})</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when a login parameter is provided&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:login</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">login</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">response</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;200&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">json</span> <span class="o">=</span> <span class="no">Yajl</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>      <span class="n">json</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="vi">@user</span><span class="o">.</span><span class="n">to_json</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>would now be written</p>

<figure class='code'><figcaption><span>New style basic test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">BasicController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">render_views</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#show&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">subject</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:login</span> <span class="o">=&gt;</span> <span class="n">login</span>
</span><span class='line'>      <span class="n">response</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;error cases&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:expected_body</span><span class="p">)</span> <span class="p">{</span> <span class="p">{</span><span class="ss">:error</span> <span class="o">=&gt;</span> <span class="n">error_symbol</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">context</span> <span class="s2">&quot;when no login parameter is provided&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">subject</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">get</span> <span class="ss">:show</span>
</span><span class='line'>          <span class="n">response</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span><span class="p">(</span><span class="ss">:error_symbol</span><span class="p">)</span> <span class="p">{</span> <span class="ss">:missing_login</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">its</span><span class="p">(</span><span class="ss">:code</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;404&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">it</span> <span class="p">{</span> <span class="no">Yajl</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">subject</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="n">expected_body</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">context</span> <span class="s2">&quot;when an invalid login parameter is provided&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">let</span><span class="p">(</span><span class="ss">:login</span><span class="p">)</span> <span class="p">{</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">let</span><span class="p">(</span><span class="ss">:error_symbol</span><span class="p">)</span> <span class="p">{</span> <span class="ss">:invalid_login</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">its</span><span class="p">(</span><span class="ss">:code</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;404&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">it</span> <span class="p">{</span> <span class="no">Yajl</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">subject</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="n">expected_body</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when a login parameter is provided&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:login</span><span class="p">)</span> <span class="p">{</span> <span class="n">user</span><span class="o">.</span><span class="n">login</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">its</span><span class="p">(</span><span class="ss">:code</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;200&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="no">Yajl</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">subject</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">to_json</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two files will provide the base for summarizing the changes between the old format and the new format. The main keywords we&#8217;ll
focus on are:
 * subject
 * let
 * it / its()</p>

<p>Not mentioned here are <em>describe</em> and <em>context</em>, these haven&#8217;t changed in the DSL however you&#8217;ll find that you use them more in the
new format.</p>

<h2>subject</h2>

<p><em>subject</em> blocks are evaluated when rspec hits an it/its call. The return value is available in it/its blocks as the varaible <em>subject</em>.
This permits you to build up the properties of your subject as you evaluate the file, you can see this in the new format where we
describe the basic subject on line 6. <em>login</em> does not exist until we have evaluated all the in-scope let blocks after encountering an it.</p>

<p>The <a href="https://www.relishapp.com/rspec/rspec-core/v/2-10/docs/subject/explicit-subject">rspec docs</a> naturally cover the concept of subjects
in detail. Something we don&#8217;t make enough use of is the ability to
<a href="https://www.relishapp.com/rspec/rspec-core/v/2-10/docs/subject/implicitly-defined-subject">implicitly define a subject</a></p>

<h2>let</h2>

<p><em>let</em> is the most important part of the new DSL. Fully grokking how <em>let</em> and <em>let!</em> work and differ from one another permits you to
really DRY up your tests. The first thing to understand is that <em>let</em> attempts to provide a concept of lexical scoping:</p>

<figure class='code'><figcaption><span>let stacking</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;something&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:the_thing</span><span class="p">)</span> <span class="p">{</span> <span class="ss">:foo</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when interesting&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:the_thing</span><span class="p">)</span> <span class="p">{</span> <span class="ss">:bar</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">the_thing</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="ss">:bar</span><span class="p">)</span> <span class="p">}</span> <span class="c1"># run first</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">the_thing</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="ss">:foo</span><span class="p">)</span> <span class="p">}</span>   <span class="c1"># run second</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clearly this is not like ruby and after a while of completely abusing variable scopes it doesn&#8217;t feel &#8220;natural&#8221;. Sometimes your <em>let</em> has
a side effect that needs to be realized immediately <em>let!</em> provides this ability. We&#8217;ve rarely found the need to use it, though it has
helped out in an occasion or two.</p>

<p>It is very easy to conflate <em>subject</em> and <em>let</em>, as the example above does; it would be far more correct to have the_thing in a <em>subject</em>.
You should keep an eye on this, by using <em>subject</em> your <em>it/its</em> calls be far more concise.</p>

<p><em>let</em> has begun replacing our use of <em>before(:each)</em>, particularly when stubbing out values; something that we&#8217;ll go into depth in another
post.</p>

<h2>it and its()</h2>

<p><em>it</em> provides the basis of an assertion. The default behavior is to operate on the result of a subject block, in our examples above we&#8217;re
returning <em>response</em>. When <em>should</em> is encountered in an <em>it</em> block without being called on an explicit receiver it is applied to the result
of <em>subject</em>:</p>

<figure class='code'><figcaption><span>Implicitly called on subject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;something&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">subject</span> <span class="p">{</span> <span class="n">expectation</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when exciting&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:expectation</span><span class="p">)</span> <span class="p">{</span> <span class="ss">:exciting</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="ss">:exciting</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when boring&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:expectation</span><span class="p">)</span> <span class="p">{</span> <span class="ss">:boring</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">({</span><span class="ss">:boring</span><span class="p">})</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>its(:sym)</em> is a special form of <em>it</em> which permits you to assert that a given property is what you expect it to me. Given</p>

<figure class='code'><figcaption><span>its(:sym)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;something&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">subject</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>      <span class="n">response</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">its</span><span class="p">(</span><span class="ss">:code</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;200&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <em>its(:code)</em> call calls #code on the subject, the block then uses this as the implicit subject.</p>

<p>This new DSL actually has one significant downside - every time you encounter an <em>it</em> it evaluates the <em>subject</em> and <em>let</em> blocks that it should.
This means if you&#8217;re testing lots of assertions you&#8217;ll end up with lots of test environment spin up. The best solution we have for that right now
is that if you are testing lots of things you should employ good judgement and wrap your assertions in the block form of it.</p>

<figure class='code'><figcaption><span>block form of it</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>   <span class="n">describe</span> <span class="s2">&quot;something&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">subject</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>      <span class="n">response</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">subject</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;200&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">subject</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In summary the trade offs of the new format are:</p>

<ul>
<li>less flexible, the old format lends to writing tests however you want</li>
<li>more syntax, and understanding that syntax - i.e. everything being lazy will burn you once or twice</li>
<li>more DRY</li>
<li>easier on the eyes, when you become acccustomed to the format it is much easier to navigate</li>
<li>less state, you&#8217;re less likely to be burned by a rouge before block which establishes an expectation of an object</li>
</ul>


<p>The expectation of our users that our site works all the time is a reasonable one, and the time investment in tests has already paid back
dividends by preventing breaking changes from hitting production. As we&#8217;re writing more tests we&#8217;re becoming far more opinionated about
the <em>how</em> and <em>why</em> of writing tests - something that I hope to delve into in more detail in future posts, along with details of our
testing infrastructure and the tools that make it possible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different Features, Equal KPI's]]></title>
    <link href="http://twitchtv.github.com/blog/2012/07/03/mobile-analytics/"/>
    <updated>2012-07-03T14:53:00-07:00</updated>
    <id>http://twitchtv.github.com/blog/2012/07/03/mobile-analytics</id>
    <content type="html"><![CDATA[<p>Last January we were really excited when Jorge joined Twitch to build us an Android app.  As a project manager a key question I helped answer was what to build for the initial release.  I pushed for a tight spec for the v1 Android, and I was excited to see how the spartan Android app’s numbers would stack up to the full featured IOS app.</p>

<!-- more -->


<p>The results are stable nearly identical key metrics: retention and minutes-watched per unique user.  The seven-day user retention are basically the same across the board; iPhone has 34% retention, iPad and Android both have 35% retention.  The minutes-watched per daily unique user are similar on all the apps; iPhone has 35, iPad 44, and Android 40 minutes per day.  The android app&#8217;s feature set consists of live video, a quality selector (480p, 720p, etc), search, and directories.  The IOS app was released with many additional features available upon login: a directory of channels you follow, push notifications, and chat.</p>

<p>We are not a “mobile-first” company; our users were familiar with Twitch before they downloaded the app.  There is solid evidence that our app growth comes primarily from pushover through alerts that encourage Twitch visitors on mobile devices to download the apps. The pushover doubled the growth in daily active IOS users and increased the growth in iPad daily actives by a factor of 20.</p>

<p>As we add features one at a time, we will see what actually affects Twitch mobile user behavior.  We could have delayed giving users something they value highly, the simple Android app, and that would have been a big waste.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Transitional Year]]></title>
    <link href="http://twitchtv.github.com/blog/2012/05/30/a-transitional-year/"/>
    <updated>2012-05-30T16:44:00-07:00</updated>
    <id>http://twitchtv.github.com/blog/2012/05/30/a-transitional-year</id>
    <content type="html"><![CDATA[<p>Next week is E3, which marks a year since we first launched TwitchTV. What a year it has been!
This post serves to provide an answer to the question I field the most when out and about talking about
what we do: &#8220;What is the difference between TwitchTV and JustinTV?&#8221;</p>

<!-- more -->


<p>I joined at the end of April &#8216;11, I&#8217;d been a fan and user of JustinTV for a long time, as a technologist I highly
admired their large scale video system, after reading
<a href="http://highscalability.com/blog/2010/3/16/justintvs-live-video-broadcasting-architecture.html">the coverage on high scalability</a>
I knew these guys were serious business. An <a href="http://ossareh.posterous.com/interviews-are-tough-code-submissions-are-har">intense interview later</a>
and I was the only developer of a new website called &#8220;Xarth&#8221;.</p>

<p>The primary task on hand was to convert all the JTV pages over to a new layout, displaying just the gaming subsection of
content available on JustinTV. It turned out that live video game streaming was taking off at an insane rate,
relative to the rest of JTV gaming looked like a rocket ship. &#8220;Xarth&#8221; was our attempt to make those gamers happy.</p>

<p>After a few weeks hacking on this conversion it was decided we launch the new site during E3 2011. I threw
myself at finishing pages and re-factoring various features to support being run on two sites. At few days prior
to launch we decided to change the name of &#8220;Xarth&#8221; to &#8220;TwitchTV&#8221;, we raced to fix all of our branding for E3 and launched!
The rest is history; we&#8217;ve been <a href="http://www.google.com/trends/?q=twitch.tv,own3d.tv,machinima.com&amp;ctab=0&amp;geo=all&amp;date=ytd&amp;sort=0"><em>killing it</em></a>
ever since.</p>

<p>So with the history out of the way, I think it is easiest to explain the difference as &#8220;TwitchTV is JustinTV with a
strong product:market fit and super passionate users&#8221;. JustinTV is now maintained by a small team within the company
with the rest of our technical focus being on building what our gaming users and broadcasters need. It is amazing
to build software for tech savvy users, they understand the pain in technology, they use modern browsers(!!!) and
as avid gamers ourselves they give us content that we enjoy! We all refer to ourselves as &#8220;TwitchTV&#8221; now&#8230;</p>

<p>Next week is E3, we&#8217;ve gone from being a company launching to being a player in the industry in a year. We&#8217;re stacked
with super exiciting announcements next week, we&#8217;ll discuss the technology behind over the next few posts.</p>
]]></content>
  </entry>
  
</feed>
